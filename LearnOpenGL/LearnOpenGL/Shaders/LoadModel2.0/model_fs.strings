#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in     vec3    FragPosition;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform sampler2D texture_normal1;
uniform sampler2D texture_height1;

uniform     vec3    ViewPos;

struct Light
{
    vec3    position;
    
    vec3    ambient;
    vec3    diffuse;
    vec3    specular;
};
uniform Light       light;

void main()
{
//    FragColor = vec4(1.f,0.f,0.f,1.f);//texture(texture_diffuse1, TexCoords);
    FragColor = texture(texture_diffuse1, TexCoords);
//    //ambient
//    float ambientStrength = 0.2;
//    vec3 ambient = light.ambient * vec3(texture(texture_diffuse1, TexCoords));
//    // diffuse
//    vec3 norm = normalize(vec3(texture(texture_normal1, TexCoords)));
//    vec3 lightDir = normalize(light.position - FragPosition);
//    float diff = max(dot(norm, lightDir), 0.0);
//    vec3 diffuse = light.diffuse * diff * vec3(texture(texture_diffuse1, TexCoords));
//    // specular
//    vec3 viewDir = normalize(ViewPos-FragPosition);
//    vec3 reflectDir = reflect(-lightDir, norm);
//    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
//    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, TexCoords));
//
//    vec3 ResultColor = (ambient + diffuse + specular);
//    FragColor = vec4(ResultColor,1.f);
}
